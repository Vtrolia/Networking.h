{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}}
{\info
{\author Vincent W Trolia}}\margl1440\margr1440\vieww12240\viewh15840\viewkind1\viewscale120
\deftab720
\pard\pardeftab720\ri0\qc\partightenfactor0

\f0\b\fs40 \cf0 Networking.h\
\
\pard\pardeftab720\ri0\qc\partightenfactor0

\b0\fs24 \cf0 A simple library of functions to make network programming in C much easier, now with SSL/TLS Support with OpenSSL! Just make sure you have it installed, as I learned that lesson the hard way.\
\pard\pardeftab720\ri0\partightenfactor0
\cf0 \
\pard\pardeftab720\ri0\qc\partightenfactor0

\b\fs32 \cf0 Structs:\
\
\pard\pardeftab720\ri0\partightenfactor0

\fs28 \cf0 Connection: 
\b0\fs24 (int socket, addrinfo *connectioninfo)\
\pard\pardeftab720\li720\fi-360\ri0\partightenfactor0
\ls1\ilvl0\cf0 -	This struct is designed as a general-purpose holder for our information when creating a connection. It contains a bounded socket to be used for a connection and a pointer to a struct that contains all of the info for the computer you wish to connect to. Generated by the make_connection() function and utilized in the connect_to_client() and connect_to_server() functions. \
\pard\pardeftab720\ri0\partightenfactor0
\cf0 \
\pard\pardeftab720\ri0\partightenfactor0

\b\fs28 \cf0 Tuple: 
\b0\fs24 (int sockaddr, int dataaddr)\
\pard\pardeftab720\li720\fi-360\ri0\partightenfactor0
\ls2\ilvl0\cf0 -	This struct is used to keep track of both sockets being used by a server program. The sockaddr is the descriptor of the socket that is listening for new connections, and dataaddr is generated for each new accepted connection. The only time you will run into this struct is when you are running a server.\
\pard\pardeftab720\ri0\partightenfactor0
\cf0 \
\pard\pardeftab720\ri0\partightenfactor0

\b\fs28 \cf0 Ssl_tuple:
\b0\fs24  (SSL *ssl_connection, SSL_CTX *ctx, int socket)\
\pard\pardeftab720\li720\fi-360\ri0\partightenfactor0
\ls3\ilvl0\cf0 -	Our final struct is one designed for memory clearing once our server or client is ready to close. Ssl_connection is a pointer to the file descriptor of an encrypted OpenSSL connection, and ctx is a pointer to the current SSL context being used. Socket is the descriptor of data transfer socket.\
\pard\pardeftab720\ri0\partightenfactor0
\cf0 \
\pard\pardeftab720\ri0\qc\partightenfactor0

\b\fs32 \cf0 Functions:\
\pard\pardeftab720\ri0\qc\partightenfactor0

\fs40 \cf0 \
\pard\pardeftab720\ri0\partightenfactor0

\fs24 \cf0 Connection make_connection( const char *domain, const char *port,  char *client_port):\
\pard\pardeftab720\li720\fi-360\ri0\partightenfactor0
\ls4\ilvl0
\b0 \cf0 -	
\i Domain
\i0 : a string that either holds the ip address or the domain name of the server you wish to connect to\
-	
\i Port
\i0 : This is a string representing the port being used on the server that you wish to connect to\
-	
\i Client_port
\i0 : another string, this time it represents the port YOU want to use on your local computer. If you are using this for a server application, pass in NULL.\
\pard\pardeftab720\ri0\partightenfactor0
\cf0 \
This function will create a socket for you that is ready to be connected to a client or a server and passes you the information you need to connect back in a connection struct. If you want to make custom connecting to client and connecting to server functions, use this. If not, this function\'92s main purpose is to be used by the higher-level functions when they actually will connect to you to the computer you want or listen for a client to connect. It will create an IPv4 TCP connection.\
\
\
\pard\pardeftab720\ri0\partightenfactor0

\b \cf0 Int connect_to_server(const char *domain, const char *port, char *client_port):\
\pard\pardeftab720\li720\fi-360\ri0\partightenfactor0
\ls5\ilvl0
\b0 \cf0 -	The  parameters for this function are exactly the same as those for make_connection(), scroll up a bit to see for yourself.\
\pard\pardeftab720\ri0\partightenfactor0
\cf0 \
This function will actually complete every part of the connection process for you up to the send() and recv() functions are needed. Because send and receive depend heavily on your specific use case, I didn\'92t want to lock you into only one possible way of sending data. It returns the socketfd of your connection to the server.\
\pard\pardeftab720\ri0\partightenfactor0

\fs28 \cf0 \
\pard\pardeftab720\ri0\partightenfactor0

\b\fs24 \cf0 tuple connect_to_client(char *port):\
\pard\pardeftab720\li720\fi-360\ri0\partightenfactor0
\ls6\ilvl0
\b0 \cf0 -	
\i Port: 
\i0 This string is the port you wish to run your server on, every other part of the equation is simply part of your local host, so we can generate it in the function itself\
\pard\pardeftab720\ri0\partightenfactor0
\cf0 \
In this function, we start a server and listen until a client attempts to connect. If it is successful, we return a tuple that has both the address of the listening socket that is still open, and the newly formed data socket to send and receive. After calling this function, send() and recv() are all that you need, aside from calling shutdown() when you are finished.\
\
\pard\pardeftab720\ri0\partightenfactor0

\b \cf0 void initialize_ssl(void):\
\
\pard\pardeftab720\ri0\partightenfactor0

\b0 \cf0 This function loads up all of the errors, algorithms and libraries needed in order to start a working OpenSSL SSL/TLS server. You must call this function first before any of the other functions using SSL or else they will not work. Put this at the top of your program, or at least at the top of any of your networking functionality.\
\
\pard\pardeftab720\ri0\partightenfactor0

\b \cf0 Int secure_send(SSL *ssl, char *message, int size) &\
 Int secure_recieve(SSL *ssl, char *buffer, int size):\
\pard\pardeftab720\li720\fi-360\ri0\partightenfactor0
\ls7\ilvl0
\b0 \cf0 -	
\i Ssl: 
\i0 A pointer to the ssl enabled socket we are using for our connection
\b \
\ls7\ilvl0
\b0 -	
\i Message/buffer:
\i0  these are the pointers to the strings where our message comes from, and where it will be put into
\b \
\ls7\ilvl0
\b0 -	
\i Size:
\i0  the size of the message (in bytes)
\b \
\pard\pardeftab720\ri0\partightenfactor0
\cf0 \
\pard\pardeftab720\ri0\partightenfactor0

\b0 \cf0 These are wrapper functions for sending and receiving SSL data. I made these so that you don\'92t have to go through the OpenSSL documentation to figure out how to use them. It doesn\'92t add or take away any of the functionality or sending or receiving, I just put the functions in an easy to understand, simple interface included in my library.\
\
\pard\pardeftab720\ri0\partightenfactor0

\b \cf0 Void create_authorization(void):\
\pard\pardeftab720\ri0\partightenfactor0

\b0 \cf0 This is a function to be used with testing or if you want to make self-signed certificates. The requirement is of course that you have OpenSSL\'92s binary compiled and ready to run. It will make a private key file in the directory your program is kept in called \'93privkey.pem\'94 and it creates the self-signed certificate as \'93cacert.pem.\'94 If you are making a full production program, I suggest using the actual OpenSSL program so you can get exactly what you want, as all this does is make a system call to the basic certification listed in OpenSSL\'92s README file.\
\
\
\pard\pardeftab720\ri0\partightenfactor0

\b \cf0 Ssl_tuple secure_connect_to_client(const char *prikey_file, const char *cert_file, \
char *port):\
\pard\pardeftab720\li720\fi-360\ri0\partightenfactor0
\ls8\ilvl0
\b0 \cf0 -	
\i prikey_file: 
\i0 This string can be either a relative or absolute path to the SSL private key you have either generated with the function above or on your own with the OpenSSL binary
\i \
\ls8\ilvl0
\i0 -	
\i cert_file:
\i0  This string is the relative or absolute path to the certificate (either self-signed or registered with a CA) that belongs to your program. Both of these are used with the new SSL connection to encrypt/decrypt the data, as well as help the client generate their own keys
\i \
\ls8\ilvl0
\i0 -	
\i port:
\i0  This is the port that you want to listen on
\i \
\pard\pardeftab720\ri0\partightenfactor0

\i0 \cf0 \
This is our SSL/TLS equivalent to the connect_to_client() function. In fact, it first calls this function so that they keys and information can be exchanged before we move to secured data transfer. We cast the regular TCP connection into a Secure Socket Layer encryption. This function returns and ssl_tuple of all the information required for secure_send(), secure_recieve() and secure_close().\
\
\pard\pardeftab720\ri0\partightenfactor0

\b \cf0 Ssl_tuple secure_connect_to_server(char *hostname, char *port, char *user_port):\
\pard\pardeftab720\li720\fi-360\ri0\partightenfactor0
\ls9\ilvl0
\b0 \cf0 -	for this function, the params are the same as the unsecure method\'92s parameters, with user_port serving the same function as client_port.
\b \
\pard\pardeftab720\ri0\partightenfactor0
\cf0 \
\pard\pardeftab720\ri0\partightenfactor0

\b0 \cf0 Much like its unsecure counterpart, this function will create a connection to the host and port passed in on the user_port you specify. Once this is complete, we cast the port as a Secure Socket Layer connection. We take all of this info and pack it into an ssl_tuple that has all the info you need for secure_send(), secure_recieve() and secure_close().\
\
\pard\pardeftab720\ri0\partightenfactor0

\b \cf0 Void secure_close(ssl_tuple running_ssl):\
\pard\pardeftab720\li720\fi-360\ri0\partightenfactor0
\ls10\ilvl0
\b0 \cf0 -	
\i running_ssl: 
\i0 this is the ssl_tuple that was either passed back to you by secure_connect_to_server() or secure_connect_to_client().\
\pard\pardeftab720\ri0\partightenfactor0
\cf0 \
This function packages together all of the steps needed to free all of the memory used by our ssl connection. It closes all of our sockets and our stored SSL functions and variables. \
\
\
\
\
\pard\pardeftab720\li720\fi-720\ri0\partightenfactor0
\cf0 ***
\b ALL ERRORS GENERATED BY THESE FUNCTIONS ARE STORED IN THE FILE\
      NET_ERRORS.LOG ***\
\pard\pardeftab720\ri0\partightenfactor0

\b0 \cf0 \
\
\
\
\
\
\
\
\pard\pardeftab720\ri0\qc\partightenfactor0

\b\fs40 \cf0 Win_Networking.h\
\
\pard\pardeftab720\ri0\qc\partightenfactor0

\b0\fs24 \cf0 This is the Microsoft Windows compatible version of Networking.h. The function calls and structs are mostly the same, except for different imports and windows led interfaces. As far as differences in code, any differences have been listed below:\
\
\pard\pardeftab720\ri0\qc\partightenfactor0

\b\fs32 \cf0 Functions:\
\
\pard\pardeftab720\ri0\partightenfactor0

\fs24 \cf0 Void shutdown(int socket, int status):\
\pard\pardeftab720\li720\fi-360\ri0\partightenfactor0
\ls11\ilvl0
\b0 \cf0 -	
\i socket: 
\i0 The socket you want to close\
-	
\i status:
\i0  How you want it to close, it is functionally the same as the POSIX codes\
\pard\pardeftab720\ri0\partightenfactor0
\cf0 \
This is the only completely different function from the POSIX version of Networking.h to the Windows version. This is merely a wrapper function so that porting your code over to Windows will require minimal changes. It works exactly the same as the POSIX version, and all if it\'92s extra functionality is just the steps required for working with the Windows specific interfaces. For most of the functions, everything works exactly the same as the other platforms\'92 version, and Windows-specific functionality is kept under the hood in the Windows version of the same functions that are present in the Unix-likes.\
\pard\pardeftab720\ri0\qc\partightenfactor0

\b\fs40 \cf0 \
\pard\pardeftab720\ri0\partightenfactor0

\b0\fs24 \cf0 \
\
\
\
}